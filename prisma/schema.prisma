// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for classification status
enum ClassificationStatus {
  PROCESSING
  READY
  VALIDATED
  DOWNLOADED
  EXPIRED
}

// User model for authentication
model User {
  id            String               @id @default(cuid())
  email         String               @unique
  name          String?
  password      String               // Hashed password
  emailVerified DateTime?
  image         String?              // Profile image URL
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  // One-to-many relation to classifications
  classifications Classification[]

  @@index([email]) // Index for fast lookups by email
}

// Classification model representing a classification session
model Classification {
  id                String                 @id @default(cuid())
  userId            String
  sessionId         String                 @unique // Unique session ID for temporary file storage in /tmp
  status            ClassificationStatus   @default(PROCESSING)
  proposedStructure Json                   // Initial structure proposed by the algorithm (JSON tree)
  finalStructure    Json?                  // User-modified structure (JSON tree, optional until validated)
  totalDocuments    Int                    @default(0)
  totalSize         BigInt                 @default(0) // Total size in bytes
  createdAt         DateTime               @default(now())
  processedAt       DateTime?
  validatedAt       DateTime?
  downloadedAt      DateTime?
  expiresAt         DateTime?              // Expiry for automatic cleanup

  // Relations
  user              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents         DocumentMetadata[]     // One-to-many with documents

  @@index([userId]) // Index for queries by user
  @@index([sessionId]) // Index for fast session lookups
  @@index([status]) // Index for filtering by status
  @@index([expiresAt]) // Index for cleanup queries
}

// DocumentMetadata model storing file metadata (no actual file content)
model DocumentMetadata {
  id               String    @id @default(cuid())
  classificationId String
  originalName     String    // Original uploaded filename
  filename         String    // Stored filename in /tmp
  fileSize         Int       // Size in bytes
  mimeType         String    // MIME type (e.g., application/pdf)
  categoryName     String?   // Assigned category name
  categoryPath     String?   // Full path in structure (e.g., "Invoices/2024")
  confidence       Float?    // Classification confidence score (0-1)
  extractedText    String?   @db.Text // Extracted text content for search/indexing
  createdAt        DateTime  @default(now())

  // Relation to classification with cascade delete
  classification   Classification @relation(fields: [classificationId], references: [id], onDelete: Cascade)

  @@index([classificationId]) // Index for queries within a classification
  @@index([categoryPath]) // Index for category-based queries
}